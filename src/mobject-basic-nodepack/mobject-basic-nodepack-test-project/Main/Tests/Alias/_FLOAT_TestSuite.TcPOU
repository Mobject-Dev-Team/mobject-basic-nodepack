<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_FLOAT_TestSuite" Id="{3351b77a-d07e-4ea1-b2e7-30ba0c52f15c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _FLOAT_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIdentifierReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{b08deca8-3fac-489e-a120-1cf52bcda650}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _FLOAT(0.0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{575bc932-a115-46dc-8796-045ca736ffbb}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _FLOAT(0.0);
	target : FLOAT := 0.0;
    expected : FLOAT := 0.0;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{0df3f158-bb6e-4763-ae9d-a386afbcfce9}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _FLOAT(123.4);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIdentifierReturnsExpected" Id="{9b268e60-8855-4035-9871-05d9c5dc8e59}">
      <Declaration><![CDATA[METHOD PUBLIC TestIdentifierReturnsExpected
VAR
    _type : _FLOAT(0.0);
    expected : STRING := 'FLOAT';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIdentifierReturnsExpected');

actual := _type.Identifier;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{c2f4ebc2-5fda-4586-bdc0-c26ff23e92c5}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _FLOAT(0.0);
	target : FLOAT := 0.0;
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{04ad3a41-e573-4e84-889a-bcd118f67a88}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _FLOAT(0.0);
	target : FLOAT := 0.0;
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := 123.4;

actual := target;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{20ac6084-753e-49a0-924b-0ea9a71a33ca}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _FLOAT(0.0);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"ALIAS","identifier":"FLOAT","baseDatatype":{"typeName":"LREAL","minValue":-1.7976931348623157e308,"maxValue":1.7976931348623157e308,"isSigned":true,"isFloat":true}}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{c87b72aa-1ed3-4074-814c-a4d4b3264f8d}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _FLOAT(123.4);
    serializer : JsonSerializer;
    expected : STRING := '123.4';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{d6cb2f19-72a8-4a49-a739-4b70de46f7dc}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _FLOAT(0.0);
    expected : UDINT := SIZEOF(FLOAT);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{adda0541-6d42-4129-92bb-9a93094f5eaf}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '123.4';
    _type : _FLOAT(0.0);
    expected : FLOAT := 123.4;
    actual : FLOAT;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{785cd9ab-3926-4162-a092-3814e4307ae3}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _FLOAT(0.0);
	target : _FLOAT(0.0);
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{e7fad7dc-6ff4-495f-ae78-64e2db096846}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _FLOAT(0.0);
	target : _FLOAT(0.0);
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := 123.4;

actual := target.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{54b5d446-f932-492b-9f22-a21374ad1fd4}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _FLOAT(0.0);
    expected : STRING := 'ALIAS';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{e344313e-eb0e-4895-823a-56344935101e}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _FLOAT(0.0);
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{ae8d124e-fd80-4c69-abf8-427f6ec74d0e}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _FLOAT(123.4);
    expected : FLOAT := 123.4;
    actual : FLOAT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>